import glob
from astropy.io import fits
from astropy.wcs import WCS
from astropy.wcs.utils import proj_plane_pixel_scales
from astropy.time import Time
import sys
import pandas
from datetime import datetime
from multiprocessing import Pool
from functools import partial
import time
import numpy
from coordio.utils import fitsTableToPandas, wokxy2radec, radec2wokxy
from coordio.defaults import PLATE_SCALE, calibration, POSITIONER_HEIGHT
from coordio.conv import tangentToWok, wokToTangent, tangentToGuide, guideToTangent
from coordio.transforms import arg_nearest_neighbor
import peewee
from sdssdb.peewee.sdss5db import database, catalogdb
database.set_profile('operations')
from skimage.exposure import equalize_hist
import matplotlib.pyplot as plt
import sep
from skimage import filters
from skimage.registration import phase_cross_correlation
from skimage.transform import EuclideanTransform, SimilarityTransform
import os

numpy.random.seed(0)

# gfaCoords = calibration.gfaCoords.reset_index()

gfaCoords = pandas.read_csv("gfaCoords_new.csv")


GIMG_BASE = "/uufs/chpc.utah.edu/common/home/sdss50/sdsswork/data/gcam/lco"
GAIA_EPOCH = 2457206
MJD_LIST = [59818, 59819, 59820, 59821, 59822, 59823, 59824, 59825, 59826, 59827, 59829, 59830, 59831, 59832, 59833, 59834, 59835, 59836, 59837, 59838, 59840, 59841, 59843, 59844, 59845, 59849, 59850, 59853, 59854, 59855]
MJD_IMGLIST = [[59818, 22], [59818, 23], [59818, 24], [59818, 25], [59818, 26], [59818, 27], [59818, 28], [59818, 29], [59818, 30], [59818, 31], [59818, 32], [59818, 33], [59818, 34], [59818, 35], [59818, 36], [59818, 37], [59818, 38], [59818, 39], [59818, 40], [59818, 41], [59818, 42], [59818, 43], [59818, 44], [59818, 45], [59818, 46], [59818, 47], [59818, 48], [59818, 49], [59818, 50], [59818, 51], [59818, 52], [59818, 53], [59818, 54], [59818, 55], [59818, 56], [59818, 57], [59818, 58], [59818, 59], [59818, 60], [59818, 61], [59818, 62], [59818, 63], [59818, 64], [59818, 65], [59818, 66], [59818, 67], [59818, 68], [59818, 69], [59818, 70], [59818, 71], [59818, 72], [59818, 73], [59818, 74], [59818, 75], [59818, 76], [59818, 77], [59818, 78], [59818, 79], [59818, 80], [59818, 81], [59818, 82], [59818, 83], [59818, 84], [59818, 85], [59818, 86], [59818, 87], [59818, 88], [59818, 89], [59818, 90], [59818, 91], [59818, 92], [59818, 93], [59818, 94], [59818, 95], [59818, 96], [59818, 97], [59818, 98], [59818, 99], [59818, 100], [59818, 101], [59818, 102], [59818, 103], [59818, 104], [59818, 105], [59818, 106], [59818, 107], [59818, 108], [59818, 109], [59818, 110], [59818, 111], [59818, 112], [59818, 113], [59818, 114], [59818, 115], [59818, 116], [59818, 117], [59818, 118], [59818, 119], [59818, 120], [59818, 121], [59818, 122], [59818, 123], [59818, 125], [59818, 126], [59818, 127], [59818, 128], [59818, 129], [59818, 130], [59818, 131], [59818, 132], [59818, 133], [59818, 134], [59818, 135], [59818, 136], [59818, 137], [59818, 138], [59818, 139], [59818, 140], [59818, 141], [59818, 142], [59818, 144], [59818, 145], [59818, 146], [59818, 147], [59818, 148], [59818, 149], [59818, 150], [59818, 151], [59818, 152], [59818, 153], [59818, 154], [59818, 155], [59818, 156], [59818, 157], [59818, 158], [59818, 159], [59818, 160], [59818, 161], [59818, 163], [59818, 164], [59818, 165], [59818, 166], [59818, 167], [59818, 168], [59818, 169], [59818, 170], [59818, 171], [59818, 172], [59818, 173], [59818, 174], [59818, 175], [59818, 176], [59818, 177], [59818, 179], [59818, 180], [59818, 181], [59818, 182], [59818, 183], [59818, 184], [59818, 185], [59818, 186], [59818, 187], [59818, 188], [59818, 189], [59818, 190], [59818, 191], [59818, 192], [59818, 193], [59818, 195], [59818, 196], [59818, 197], [59818, 198], [59818, 199], [59818, 200], [59818, 201], [59818, 202], [59818, 203], [59818, 204], [59818, 205], [59818, 206], [59818, 207], [59818, 208], [59818, 209], [59818, 210], [59818, 212], [59818, 213], [59818, 214], [59818, 215], [59818, 216], [59818, 217], [59818, 218], [59818, 219], [59818, 220], [59818, 221], [59818, 222], [59818, 223], [59818, 224], [59818, 225], [59818, 226], [59818, 227], [59818, 228], [59818, 229], [59818, 230], [59818, 231], [59818, 232], [59818, 233], [59818, 234], [59818, 235], [59818, 236], [59818, 237], [59818, 238], [59818, 239], [59818, 240], [59818, 241], [59819, 38], [59819, 39], [59819, 40], [59819, 41], [59819, 42], [59819, 43], [59819, 44], [59819, 45], [59819, 46], [59819, 47], [59819, 48], [59819, 49], [59819, 50], [59819, 51], [59819, 52], [59819, 53], [59819, 54], [59819, 55], [59819, 56], [59819, 57], [59819, 58], [59820, 138], [59820, 139], [59820, 140], [59820, 141], [59820, 142], [59820, 143], [59820, 144], [59820, 145], [59820, 146], [59820, 147], [59820, 148], [59820, 149], [59820, 150], [59821, 14], [59821, 15], [59821, 16], [59821, 17], [59821, 18], [59821, 19], [59821, 20], [59821, 21], [59821, 22], [59821, 23], [59821, 24], [59821, 25], [59821, 26], [59821, 27], [59821, 28], [59821, 29], [59821, 30], [59821, 31], [59821, 32], [59821, 33], [59821, 34], [59821, 35], [59821, 36], [59821, 37], [59821, 38], [59821, 39], [59821, 40], [59821, 41], [59821, 42], [59821, 43], [59821, 44], [59821, 45], [59821, 55], [59821, 56], [59821, 57], [59821, 58], [59821, 59], [59821, 60], [59821, 61], [59821, 62], [59821, 63], [59821, 64], [59821, 65], [59821, 66], [59821, 67], [59821, 68], [59821, 69], [59821, 70], [59821, 71], [59821, 72], [59821, 73], [59821, 74], [59821, 77], [59821, 78], [59821, 79], [59821, 80], [59821, 81], [59821, 82], [59821, 83], [59821, 84], [59821, 85], [59821, 86], [59821, 87], [59821, 88], [59821, 89], [59821, 90], [59821, 91], [59821, 92], [59821, 93], [59821, 94], [59821, 95], [59821, 96], [59821, 97], [59821, 98], [59821, 99], [59821, 100], [59821, 101], [59821, 102], [59821, 103], [59821, 104], [59821, 105], [59821, 106], [59821, 107], [59821, 108], [59821, 109], [59821, 110], [59821, 111], [59821, 112], [59821, 113], [59821, 114], [59821, 115], [59821, 116], [59821, 117], [59824, 833], [59824, 834], [59824, 835], [59833, 13], [59833, 14], [59833, 15], [59833, 16], [59833, 17], [59833, 18], [59833, 19], [59833, 20], [59833, 21], [59833, 22], [59833, 23], [59833, 24], [59833, 25], [59833, 26], [59833, 27], [59833, 28], [59833, 29], [59833, 30], [59833, 31], [59833, 32], [59833, 33], [59833, 34], [59833, 35], [59833, 36], [59833, 37], [59833, 38], [59833, 39], [59834, 54], [59834, 55], [59834, 56], [59834, 57], [59834, 58], [59834, 59], [59834, 60], [59834, 61], [59834, 62], [59834, 63], [59834, 64], [59834, 65], [59834, 66], [59834, 67], [59834, 68], [59834, 69], [59834, 70], [59834, 71], [59834, 72], [59834, 73], [59834, 74], [59834, 75], [59834, 76], [59834, 77], [59834, 78], [59834, 79], [59834, 80], [59834, 81], [59834, 85], [59834, 86], [59834, 87], [59834, 88], [59834, 89], [59834, 90], [59834, 91], [59834, 92], [59834, 93], [59834, 94], [59834, 95], [59834, 96], [59834, 97], [59834, 98], [59834, 99], [59834, 100], [59834, 101], [59834, 102], [59834, 103], [59834, 104], [59834, 105], [59834, 106], [59834, 107], [59834, 108], [59835, 27], [59835, 28], [59835, 29], [59835, 30], [59835, 31], [59835, 32], [59835, 33], [59835, 34], [59835, 35], [59835, 36], [59835, 37], [59835, 38], [59835, 39], [59835, 40], [59835, 41], [59835, 42], [59835, 43], [59835, 44], [59835, 45], [59835, 46], [59835, 47], [59835, 50], [59835, 51], [59835, 52], [59835, 53], [59835, 54], [59835, 55], [59835, 56], [59835, 57], [59835, 58], [59835, 59], [59835, 60], [59835, 61], [59835, 62], [59835, 63], [59835, 64], [59835, 65], [59835, 66], [59835, 67], [59835, 68], [59835, 69], [59835, 70], [59835, 71], [59835, 73], [59835, 75], [59835, 76], [59835, 77], [59835, 78], [59835, 79], [59835, 80], [59835, 81], [59835, 82], [59835, 83], [59835, 84], [59835, 85], [59835, 86], [59835, 87], [59835, 88], [59835, 89], [59835, 90], [59835, 91], [59835, 92], [59835, 93], [59835, 94], [59835, 95], [59835, 96], [59836, 54], [59836, 55], [59836, 56], [59836, 57], [59836, 58], [59836, 59], [59836, 60], [59836, 61], [59836, 62], [59836, 63], [59836, 64], [59836, 65], [59836, 66], [59836, 67], [59836, 68], [59836, 69], [59836, 70], [59836, 71], [59836, 72], [59836, 73], [59836, 74], [59836, 75], [59836, 76], [59836, 77], [59836, 78], [59836, 80], [59836, 81], [59836, 82], [59836, 83], [59836, 84], [59836, 85], [59836, 86], [59836, 87], [59836, 88], [59836, 89], [59836, 90], [59836, 91], [59836, 92], [59836, 93], [59836, 94], [59836, 95], [59836, 96], [59836, 97], [59836, 98], [59836, 99], [59836, 100], [59836, 101], [59837, 588], [59837, 589], [59837, 590], [59837, 591], [59837, 592], [59837, 593], [59837, 594], [59837, 595], [59837, 596], [59837, 597], [59837, 598], [59837, 599], [59837, 600], [59837, 601], [59837, 602], [59837, 603], [59837, 604], [59837, 605], [59837, 606], [59837, 607], [59837, 608], [59837, 840], [59837, 841], [59837, 842], [59837, 843], [59837, 844], [59837, 845], [59837, 846], [59837, 847], [59837, 848], [59837, 849], [59837, 850], [59837, 851], [59837, 852], [59837, 853], [59837, 854], [59837, 855], [59837, 856], [59837, 857], [59837, 858], [59837, 859], [59837, 860], [59837, 861], [59837, 869], [59837, 875], [59837, 879], [59837, 884], [59837, 885], [59837, 1160], [59837, 1161], [59838, 22], [59838, 23], [59838, 24], [59838, 25], [59838, 26], [59838, 27], [59838, 28], [59838, 29], [59838, 30], [59838, 31], [59838, 32], [59838, 33], [59838, 34], [59838, 35], [59838, 36], [59838, 37], [59838, 38], [59838, 39], [59838, 40], [59838, 41], [59838, 42], [59838, 43], [59838, 44], [59841, 35], [59841, 36], [59841, 37], [59841, 38], [59841, 39], [59841, 40], [59841, 41], [59841, 42], [59841, 43], [59841, 44], [59841, 45], [59841, 46], [59841, 47], [59841, 48], [59841, 49], [59841, 50], [59841, 51], [59841, 52], [59841, 53], [59841, 54], [59841, 55], [59841, 56], [59843, 22], [59843, 23], [59843, 24], [59843, 25], [59843, 26], [59843, 28], [59843, 29], [59843, 30], [59843, 31], [59843, 32], [59843, 33], [59843, 34], [59843, 35], [59843, 36], [59843, 37], [59843, 38], [59843, 39], [59843, 40], [59843, 41], [59843, 42], [59843, 43], [59843, 44], [59843, 45], [59843, 46], [59843, 47], [59843, 48], [59843, 316], [59844, 13], [59844, 14], [59844, 15], [59844, 16], [59844, 17], [59844, 18], [59844, 19], [59844, 20], [59844, 21], [59844, 22], [59844, 23], [59844, 24], [59844, 25], [59844, 26], [59844, 27], [59844, 28], [59844, 29], [59844, 30], [59844, 31], [59844, 32], [59844, 33], [59844, 34], [59844, 35], [59845, 64], [59845, 65], [59845, 66], [59845, 67], [59845, 68], [59845, 69], [59845, 70], [59845, 71], [59845, 72], [59845, 73], [59845, 74], [59845, 75], [59845, 76], [59845, 77], [59845, 78], [59845, 79], [59845, 80], [59845, 81], [59845, 82], [59845, 83], [59845, 84], [59845, 85], [59845, 86], [59845, 87], [59845, 88], [59845, 89], [59845, 90], [59845, 91], [59845, 92], [59845, 93], [59845, 94], [59845, 95], [59845, 96], [59845, 97], [59845, 98], [59845, 99], [59845, 100], [59845, 101], [59845, 102], [59845, 103], [59845, 104], [59845, 105], [59845, 106], [59845, 107], [59845, 108], [59845, 109], [59845, 110], [59845, 111], [59845, 112], [59845, 113], [59845, 114], [59845, 115], [59845, 116], [59845, 117], [59845, 118], [59845, 119], [59845, 120], [59845, 121], [59845, 122], [59845, 123], [59845, 124], [59845, 125], [59845, 126], [59845, 127], [59845, 128], [59845, 129], [59845, 130], [59845, 131], [59845, 132], [59845, 133], [59845, 134], [59845, 135], [59845, 136], [59845, 137], [59845, 138], [59845, 139], [59845, 140], [59845, 141], [59845, 142], [59845, 143], [59845, 144], [59845, 145], [59845, 146], [59845, 147], [59845, 148], [59845, 149], [59845, 150], [59845, 151], [59845, 152], [59845, 153], [59845, 154], [59845, 155], [59845, 156], [59845, 157], [59845, 158], [59845, 159], [59845, 160], [59845, 161], [59845, 162], [59845, 163], [59845, 164], [59845, 165], [59845, 166], [59845, 167], [59845, 168], [59845, 169], [59845, 170], [59845, 171], [59845, 172], [59845, 173], [59845, 174], [59845, 175], [59845, 176], [59845, 177], [59845, 178], [59845, 179], [59845, 180], [59845, 181], [59845, 182], [59845, 183], [59845, 184], [59845, 185], [59845, 186], [59845, 187], [59845, 188], [59845, 189], [59845, 190], [59845, 191], [59845, 192], [59845, 193], [59845, 194], [59845, 195], [59845, 196], [59845, 197], [59845, 198], [59845, 199], [59845, 200], [59845, 201], [59845, 202], [59845, 203], [59845, 204], [59845, 205], [59845, 206], [59845, 207], [59845, 208], [59845, 209], [59845, 210], [59845, 211], [59845, 212], [59845, 213], [59845, 214], [59845, 215], [59845, 216], [59845, 217], [59845, 218], [59845, 219], [59845, 220], [59845, 221], [59845, 222], [59845, 223], [59845, 224], [59845, 225], [59845, 226], [59845, 227], [59845, 228], [59845, 229], [59845, 230], [59849, 32], [59849, 33], [59849, 34], [59849, 35], [59849, 36], [59849, 37], [59849, 38], [59849, 39], [59849, 40], [59849, 41], [59849, 42], [59849, 43], [59849, 44], [59849, 45], [59849, 46], [59849, 47], [59849, 48], [59849, 49], [59849, 50], [59849, 51], [59849, 52], [59849, 53], [59849, 54], [59849, 55], [59849, 56], [59849, 57], [59849, 58], [59849, 59], [59849, 60], [59849, 61], [59849, 62], [59849, 63], [59849, 64], [59849, 65], [59849, 66], [59849, 67], [59849, 68], [59849, 69], [59849, 70], [59849, 71], [59849, 72], [59849, 73], [59849, 74], [59849, 75], [59849, 76], [59849, 77], [59849, 78], [59849, 79], [59849, 80], [59849, 81], [59849, 82], [59849, 83], [59849, 84], [59849, 85], [59849, 86], [59849, 87], [59849, 88], [59849, 89], [59849, 90], [59849, 91], [59849, 92], [59849, 93], [59849, 94], [59849, 95], [59849, 96], [59849, 97], [59849, 98], [59849, 99], [59849, 100], [59849, 101], [59849, 102], [59849, 103], [59849, 104], [59849, 105], [59849, 106], [59849, 107], [59849, 108], [59849, 109], [59849, 110], [59849, 111], [59849, 112], [59849, 113], [59849, 114], [59849, 115], [59849, 116], [59849, 117], [59849, 118], [59849, 119], [59849, 120], [59849, 121], [59849, 122], [59849, 123], [59849, 124], [59849, 125], [59849, 126], [59849, 127], [59849, 128], [59849, 129], [59849, 130], [59849, 131], [59849, 132], [59849, 133], [59849, 134], [59849, 135], [59849, 136], [59849, 137], [59849, 138], [59849, 139], [59849, 140], [59849, 141], [59849, 142], [59849, 143], [59849, 144], [59849, 145], [59849, 146], [59849, 147], [59849, 148], [59849, 149], [59849, 150], [59849, 151], [59849, 152], [59849, 153], [59849, 154], [59849, 155], [59849, 156], [59849, 157], [59849, 158], [59849, 159], [59849, 160], [59849, 161], [59849, 162], [59849, 163], [59849, 164], [59849, 165], [59849, 166], [59849, 167], [59849, 168], [59849, 169], [59849, 170], [59849, 171], [59849, 172], [59849, 173], [59849, 174], [59849, 175], [59849, 176], [59849, 177], [59849, 178], [59849, 179], [59849, 180], [59849, 181], [59849, 182], [59849, 183], [59849, 184], [59849, 188], [59849, 192], [59849, 193], [59849, 195], [59849, 197], [59849, 198], [59849, 199], [59849, 200], [59849, 201], [59849, 202], [59849, 203], [59849, 204], [59849, 205], [59849, 206], [59849, 207], [59849, 208], [59849, 209], [59849, 211], [59849, 213], [59849, 214], [59849, 215], [59849, 216], [59849, 217], [59849, 218], [59849, 220], [59849, 221], [59849, 222], [59849, 224], [59849, 225], [59849, 226], [59849, 227], [59849, 228], [59849, 229], [59849, 230], [59849, 231], [59849, 232], [59849, 233], [59849, 235], [59849, 236], [59849, 237], [59849, 238], [59849, 239], [59849, 240], [59849, 241], [59849, 242], [59849, 243], [59849, 244], [59849, 245], [59849, 247], [59849, 255], [59849, 258], [59849, 259], [59849, 260], [59849, 261], [59849, 262], [59849, 263], [59849, 264], [59849, 265], [59849, 266], [59849, 267], [59849, 268], [59849, 270], [59849, 291], [59849, 292], [59849, 293], [59849, 294], [59849, 295], [59849, 296], [59849, 297], [59849, 298], [59849, 299], [59849, 300], [59849, 301], [59849, 302], [59849, 303], [59849, 304], [59849, 305], [59849, 306], [59849, 307], [59849, 308], [59849, 309], [59849, 310], [59849, 311], [59849, 312], [59849, 314], [59849, 315], [59849, 316], [59849, 317], [59849, 318], [59849, 319], [59849, 320], [59849, 321], [59849, 322], [59849, 323], [59849, 324], [59849, 325], [59849, 326], [59849, 327], [59849, 328], [59849, 329], [59849, 330], [59849, 331], [59849, 332], [59849, 333], [59849, 334], [59849, 335], [59849, 336], [59849, 337], [59849, 338], [59849, 339], [59849, 340], [59849, 341], [59849, 342], [59849, 343], [59849, 344], [59849, 345], [59849, 346], [59849, 347], [59849, 348], [59849, 349], [59849, 350], [59849, 351], [59849, 355], [59849, 357], [59849, 358], [59849, 359], [59849, 360], [59849, 361], [59849, 364], [59849, 368], [59849, 379], [59849, 380], [59849, 581], [59849, 582], [59849, 583], [59849, 585], [59849, 594], [59849, 595], [59849, 602], [59849, 603], [59849, 617], [59849, 618], [59849, 620], [59849, 621], [59849, 622], [59849, 623], [59849, 624], [59849, 625], [59849, 630], [59849, 631], [59849, 632], [59849, 633], [59849, 634], [59849, 636], [59849, 637], [59849, 638], [59849, 640], [59849, 642], [59849, 679], [59849, 680], [59849, 681], [59849, 682], [59849, 683], [59849, 684], [59849, 686], [59849, 688], [59849, 689], [59849, 691], [59849, 694], [59849, 695], [59849, 696], [59849, 697], [59849, 698], [59849, 699], [59849, 700], [59849, 701], [59849, 702], [59849, 703], [59849, 704], [59849, 705], [59849, 706], [59849, 707], [59849, 708], [59849, 709], [59849, 710], [59849, 712], [59849, 713], [59849, 716], [59849, 717], [59849, 718], [59849, 719], [59849, 720], [59849, 721], [59849, 723], [59849, 724], [59849, 725], [59849, 726], [59850, 32], [59850, 33], [59850, 34], [59850, 35], [59850, 36], [59850, 37], [59850, 38], [59850, 39], [59850, 40], [59850, 41], [59850, 42], [59850, 43], [59850, 44], [59850, 45], [59850, 46], [59850, 47], [59850, 48], [59850, 49], [59850, 50], [59850, 51], [59850, 52], [59850, 53], [59850, 54], [59850, 55], [59850, 56], [59850, 57], [59850, 58], [59850, 59], [59850, 60], [59850, 61], [59850, 62], [59850, 63], [59850, 64], [59850, 65], [59850, 66], [59850, 67], [59850, 68], [59850, 69], [59850, 70], [59850, 71], [59850, 480], [59850, 482], [59850, 483], [59850, 484], [59850, 485], [59850, 487], [59850, 488], [59850, 491], [59853, 22], [59853, 25], [59853, 26], [59853, 40], [59853, 77], [59853, 78], [59853, 79], [59853, 80], [59853, 81], [59853, 82], [59853, 83], [59853, 85], [59853, 86], [59853, 88], [59853, 89], [59853, 96], [59853, 249], [59853, 250], [59853, 252], [59853, 256], [59853, 268], [59853, 284], [59854, 22], [59854, 23], [59854, 24], [59854, 25], [59854, 26], [59854, 27], [59854, 28], [59854, 29], [59854, 30], [59854, 31], [59854, 32], [59854, 33], [59854, 34], [59854, 35], [59854, 36], [59854, 37], [59854, 38], [59854, 39], [59854, 40], [59854, 41], [59854, 42], [59854, 43], [59854, 44], [59854, 45], [59854, 46], [59854, 47], [59854, 48], [59854, 49], [59854, 50], [59854, 51], [59854, 52], [59854, 53], [59854, 54], [59854, 55], [59854, 56], [59854, 57], [59854, 58], [59854, 59], [59854, 60], [59854, 61], [59854, 62], [59854, 63], [59854, 64], [59854, 65], [59854, 66], [59854, 67], [59854, 68], [59854, 69], [59854, 70], [59854, 71], [59854, 72], [59854, 73], [59854, 74], [59854, 75], [59854, 76], [59854, 77], [59854, 78], [59854, 79], [59854, 80], [59854, 81], [59854, 82], [59854, 83], [59854, 84], [59854, 85], [59854, 86], [59854, 87], [59854, 88], [59854, 89], [59854, 90], [59854, 91], [59854, 92], [59854, 93], [59854, 94], [59854, 95], [59854, 96], [59854, 97], [59854, 98], [59854, 99], [59854, 100], [59854, 101], [59854, 102], [59854, 103], [59854, 104], [59854, 105], [59854, 106], [59854, 107], [59854, 108], [59854, 109], [59854, 110], [59854, 111], [59854, 112], [59854, 113], [59854, 114], [59854, 115], [59854, 116], [59854, 117], [59854, 118], [59854, 119], [59854, 120], [59854, 121], [59854, 122], [59854, 123], [59854, 124], [59854, 125], [59854, 126], [59854, 127], [59854, 128], [59854, 129], [59854, 130], [59854, 131], [59854, 132], [59854, 133], [59854, 134], [59854, 135], [59854, 136], [59854, 137], [59854, 138], [59854, 139], [59854, 140], [59854, 141], [59854, 142], [59854, 143], [59854, 144], [59854, 145], [59854, 146], [59854, 147], [59854, 148], [59854, 149], [59854, 150], [59854, 151], [59854, 152], [59854, 153], [59854, 154], [59854, 155], [59854, 156], [59854, 157], [59854, 158], [59854, 159], [59854, 160], [59854, 161], [59854, 162], [59854, 163], [59854, 164], [59854, 165], [59854, 166], [59854, 167], [59854, 168], [59854, 169], [59854, 170], [59854, 171], [59854, 172], [59854, 173], [59854, 174], [59854, 175], [59854, 176], [59854, 177], [59854, 178], [59854, 179], [59854, 180], [59854, 181], [59854, 182], [59854, 183], [59854, 184], [59854, 185], [59854, 186], [59854, 187], [59854, 188], [59854, 189], [59854, 190], [59854, 193], [59854, 194], [59854, 195], [59854, 198], [59854, 199], [59854, 200], [59854, 201], [59854, 202], [59854, 203], [59854, 205], [59854, 206], [59854, 208], [59854, 210], [59854, 214], [59854, 216], [59854, 217], [59854, 218], [59854, 221], [59854, 222], [59854, 224], [59854, 226], [59854, 227], [59854, 228], [59854, 229], [59854, 233], [59854, 234], [59854, 235], [59854, 236], [59854, 237], [59854, 238], [59854, 239], [59854, 246], [59854, 247], [59854, 250], [59854, 271], [59854, 272], [59854, 273], [59854, 277], [59854, 278], [59854, 279], [59854, 280], [59854, 281], [59854, 282], [59854, 283], [59854, 284], [59854, 285], [59854, 286], [59854, 287], [59854, 288], [59854, 289], [59854, 290], [59854, 294], [59854, 299], [59854, 303], [59854, 304], [59854, 305], [59854, 306], [59854, 307], [59854, 308], [59854, 309], [59854, 310], [59854, 313], [59854, 314], [59854, 315], [59854, 316], [59854, 317], [59854, 318], [59854, 319], [59854, 320], [59854, 321], [59854, 322], [59854, 323], [59854, 324], [59854, 325], [59854, 326], [59854, 327], [59854, 331], [59854, 332], [59854, 333], [59854, 335], [59854, 336], [59854, 337], [59854, 338], [59854, 339], [59854, 340], [59854, 341], [59854, 343], [59854, 344], [59854, 345], [59854, 346], [59854, 348], [59854, 349], [59854, 350], [59854, 351], [59854, 352], [59854, 353], [59854, 354], [59854, 355], [59854, 356], [59854, 370], [59854, 486], [59854, 487], [59854, 488], [59854, 489], [59854, 490], [59854, 491], [59854, 492], [59854, 493], [59854, 494], [59854, 497], [59854, 498], [59854, 499], [59854, 501], [59854, 503], [59854, 504], [59854, 505], [59854, 507], [59854, 508], [59854, 509], [59854, 513], [59854, 514], [59854, 515], [59854, 516], [59854, 517], [59854, 518], [59854, 519], [59854, 520], [59854, 521], [59854, 522], [59854, 523], [59854, 524], [59854, 525], [59854, 526], [59854, 527], [59854, 528], [59854, 529], [59854, 530], [59854, 531], [59854, 532], [59854, 533], [59854, 534], [59854, 535], [59854, 536], [59854, 537], [59854, 538], [59854, 539], [59854, 540], [59854, 541], [59854, 542], [59854, 543], [59854, 544], [59854, 545], [59854, 546], [59854, 547], [59854, 548], [59854, 549], [59854, 550], [59854, 551], [59854, 552], [59854, 554], [59854, 555], [59854, 556], [59854, 557], [59854, 558], [59854, 559], [59854, 560], [59854, 561], [59854, 562], [59854, 566], [59854, 568], [59854, 570], [59854, 572], [59854, 574], [59854, 575], [59854, 578], [59855, 23], [59855, 24], [59855, 25], [59855, 26], [59855, 27], [59855, 28], [59855, 29], [59855, 30], [59855, 31], [59855, 32], [59855, 33], [59855, 34], [59855, 35], [59855, 36], [59855, 37], [59855, 38], [59855, 39], [59855, 40], [59855, 41], [59855, 42], [59855, 43], [59855, 44], [59855, 45], [59855, 46], [59855, 47], [59855, 48], [59855, 49], [59855, 50], [59855, 51], [59855, 52], [59855, 53], [59855, 54], [59855, 55], [59855, 56], [59855, 57], [59855, 58], [59855, 59], [59855, 60], [59855, 61], [59855, 62], [59855, 63], [59855, 64], [59855, 65], [59855, 66], [59855, 67], [59855, 68], [59855, 69], [59855, 70], [59855, 71], [59855, 72], [59855, 73], [59855, 74], [59855, 75], [59855, 76], [59855, 77], [59855, 78], [59855, 79], [59855, 80], [59855, 81], [59855, 82], [59855, 83], [59855, 84], [59855, 85], [59855, 86], [59855, 87], [59855, 88], [59855, 89], [59855, 90], [59855, 91], [59855, 92], [59855, 93], [59855, 94], [59855, 95], [59855, 96], [59855, 97], [59855, 98], [59855, 99], [59855, 100], [59855, 101], [59855, 102], [59855, 103], [59855, 104], [59855, 105], [59855, 106], [59855, 107], [59855, 108], [59855, 109], [59855, 110], [59855, 111], [59855, 112], [59855, 113], [59855, 114], [59855, 115], [59855, 116], [59855, 117], [59855, 118], [59855, 119], [59855, 120], [59855, 121], [59855, 122], [59855, 123], [59855, 124], [59855, 125], [59855, 126], [59855, 127], [59855, 128], [59855, 129], [59855, 130], [59855, 131], [59855, 132], [59855, 133], [59855, 134], [59855, 135], [59855, 136], [59855, 137], [59855, 138], [59855, 139], [59855, 140], [59855, 141], [59855, 142], [59855, 143], [59855, 144], [59855, 145], [59855, 146], [59855, 147], [59855, 148], [59855, 149], [59855, 150], [59855, 151], [59855, 152], [59855, 153], [59855, 154], [59855, 155], [59855, 156], [59855, 157], [59855, 158], [59855, 159], [59855, 160], [59855, 161], [59855, 162], [59855, 163], [59855, 164], [59855, 165], [59855, 166], [59855, 167], [59855, 168], [59855, 169], [59855, 170], [59855, 171], [59855, 172], [59855, 173], [59855, 186], [59855, 187], [59855, 188], [59855, 189], [59855, 190], [59855, 191], [59855, 192], [59855, 193], [59855, 195], [59855, 196], [59855, 197], [59855, 199], [59855, 200], [59855, 202], [59855, 204], [59855, 206], [59855, 207], [59855, 208], [59855, 210], [59855, 211], [59855, 212], [59855, 213], [59855, 216], [59855, 217], [59855, 218], [59855, 220], [59855, 221], [59855, 222], [59855, 223], [59855, 224], [59855, 225], [59855, 226], [59855, 227], [59855, 228], [59855, 230], [59855, 231], [59855, 232], [59855, 233], [59855, 234], [59855, 235], [59855, 236], [59855, 237], [59855, 238], [59855, 239], [59855, 240], [59855, 241], [59855, 243], [59855, 244], [59855, 245], [59855, 246], [59855, 247], [59855, 248], [59855, 249], [59855, 250], [59855, 251], [59855, 252], [59855, 253], [59855, 254], [59855, 255], [59855, 256], [59855, 257], [59855, 258], [59855, 260], [59855, 261], [59855, 264], [59855, 265], [59855, 268], [59855, 281], [59855, 397], [59855, 399], [59855, 400], [59855, 401], [59855, 402], [59855, 403], [59855, 404], [59855, 406], [59855, 407], [59855, 408], [59855, 409], [59855, 411], [59855, 412], [59855, 413], [59855, 414], [59855, 415], [59855, 420], [59855, 422], [59855, 423], [59855, 424], [59855, 425], [59855, 426], [59855, 427], [59855, 428], [59855, 429], [59855, 430], [59855, 431], [59855, 432], [59855, 433], [59855, 434], [59855, 435], [59855, 436], [59855, 437], [59855, 438], [59855, 439], [59855, 440], [59855, 441], [59855, 442], [59855, 443], [59855, 444], [59855, 445], [59855, 446], [59855, 447], [59855, 448], [59855, 449], [59855, 450], [59855, 451], [59855, 452], [59855, 453], [59855, 454], [59855, 455], [59855, 456], [59855, 457], [59855, 458], [59855, 459], [59855, 460], [59855, 461], [59855, 462], [59855, 463], [59855, 464], [59855, 465], [59855, 466], [59855, 467], [59855, 468], [59855, 469], [59855, 470], [59855, 471], [59855, 472], [59855, 492]]
def getImgNums(mjd, configid, gfaID=1):
    allFiles = glob.glob(GIMG_BASE + "/%i/proc-gimg-gfa%is-*.fits"%(mjd,gfaID))
    imgNums = []
    for f in allFiles:
        ff = fits.open(f)
        if ff[1].header["CONFIGID"] == configid:
            imgNum = int(f.split("-")[-1].split(".fits")[0])
            imgNums.append(imgNum)
    return imgNums

def getMetaData(imgNum, mjd):
    imgNumStr = str(imgNum).zfill(4)
    _fwhm = []
    _solved = []
    _imgNum = []
    _gfaID = []
    _nStars = []
    _fieldRA = []
    _fieldDec = []
    _fieldPA = []
    _mjd = []
    _exptime = []
    _dateObs = []
    _grms = []
    _offra = []
    _offdec = []
    _offpa = []
    _configid = []
    for gfaID in range(1,7):
        imgFile = GIMG_BASE + "/%i/proc-gimg-gfa%is-%s.fits"%(mjd,gfaID,imgNumStr)
        ff = fits.open(imgFile)
        try:
            _fwhm.append(ff[1].header["FWHM"])
        except:
            _fwhm.append(numpy.nan)
        _solved.append(ff[1].header["SOLVED"])
        _imgNum.append(imgNum)
        _gfaID.append(gfaID)
        _nStars.append(len(ff["CENTROIDS"].data))
        _fieldRA.append(ff[1].header["RAFIELD"])
        _fieldDec.append(ff[1].header["DECFIELD"])
        _fieldPA.append(ff[1].header["FIELDPA"])
        _mjd.append(mjd)
        _exptime.append(ff[1].header["EXPTIME"])
        _configid.append(ff[1].header["CONFIGID"])
        dateObs = datetime.fromisoformat(ff[1].header["DATE-OBS"])
        _dateObs.append(dateObs)
        try:
            _grms.append(ff[1].header["RMS"])
        except:
            _grms.append(numpy.nan)
        _offra.append(ff[1].header["OFFRA"])
        _offdec.append(ff[1].header["OFFDEC"])
        _offpa.append(ff[1].header["OFFPA"])


    df = pandas.DataFrame(
        {
        "fwhm": _fwhm,
        "solved": _solved,
        "imgNum": _imgNum,
        "gfaID": _gfaID,
        "nStars": _nStars,
        "fieldRA": _fieldRA,
        "fieldDec": _fieldDec,
        "fieldPA": _fieldPA,
        "mjd": _mjd,
        "exptime": _exptime,
        "dateObs": _dateObs,
        "grms": _grms,
        "offra": _offra,
        "offdec": _offdec,
        "offpa": _offpa,
        "configid": _configid
        }
    )

    return df


def doConfig(mjd, configid):
    imgNums = getImgNums(mjd, configid)

    p = Pool(25)
    _getMetaData = partial(getMetaData, mjd=mjd)
    tstart = time.time()
    dfList = p.map(_getMetaData, imgNums)
    print("took", time.time()-tstart)

    # dfList = [getMetaData(imgNum, mjd) for imgNum in imgNums]
    if dfList:
        df = pandas.concat(dfList)
        return df
    else:
        return None


def gimgMeta():
    mjdConfigList = [
        [59835, 10000193],
        [59835, 10000196],
        [59835, 10000197],
        [59836, 10000202],
        [59836, 10000203],
        [59836, 10000204],
        [59837, 10000205],
        [59837, 10000207],
        [59837, 10000208],
        [59837, 10000209],
        [59838, 10000259],
        [59839, 10000275],
        [59839, 10000277],
        [59839, 10000278],
        [59843, 10000279],
        [59843, 10000280],
        [59843, 10000281],

    ]

    dfList = []
    for mjd, configid in mjdConfigList:
        print("processing", mjd, configid)
        dfList.append(doConfig(mjd,configid))

    dfList = [x for x in dfList if x is not None]
    df = pandas.concat(dfList)
    df.to_csv("gimgMeta.csv")


def getCentroids(data):
    data = numpy.array(data, dtype=numpy.float64)
    bkg = sep.Background(data)
    bkg_image = bkg.back()
    bkg_rms = bkg.rms()
    data_sub = data - bkg
    objects = sep.extract(data_sub, 1.5, err=bkg.globalrms)
    objects = fitsTableToPandas(objects)
    objects = objects[objects.npix>50]
    return objects

def queryGaia(raCen, decCen, radius=0.08):
    # all inputs in degrees
    MAX_MAG = 18

    results = catalogdb.Gaia_DR2.select(
        catalogdb.Gaia_DR2.solution_id,
        catalogdb.Gaia_DR2.source_id,
        catalogdb.Gaia_DR2.ra,
        catalogdb.Gaia_DR2.dec,
        catalogdb.Gaia_DR2.phot_g_mean_mag,
        catalogdb.Gaia_DR2.parallax,
        catalogdb.Gaia_DR2.pmra,
        catalogdb.Gaia_DR2.pmdec
    ).where(
        (peewee.fn.q3c_radial_query(
            catalogdb.Gaia_DR2.ra,
            catalogdb.Gaia_DR2.dec,
            raCen,
            decCen,
            radius)
        ) & \
        (catalogdb.Gaia_DR2.phot_g_mean_mag < MAX_MAG)
    )

    return list(results)


def getShift(xyGaia, xyDetect):
    """
    xyGaia Gaia Sources
    xyDetect CCD detections

    """
    n = len(xyGaia)
    m = len(xyDetect)
    dx = numpy.zeros((n,m))
    dy = numpy.zeros((n,m))
    for ii, (x,y) in enumerate(xyGaia):
        dx[ii, :] = x - xyDetect[:,0]
        dy[ii, :] = y - xyDetect[:,1]
    # import pdb; pdb.set_trace()
    _dx = numpy.median(dx)
    _dy = numpy.median(dy)
    print(_dx, _dy)

    return _dx, _dy


def getShift2(xyGaia, xyDetect):
    """ use "fake" images to get cross correlation solution
    between the two lists, takes 1.5 seconds on my machine
    """
    tstart = time.time()
    gaiaFull = numpy.zeros((2048,2048)) #CCD size
    detectFull = numpy.zeros((2048,2048)) #CCD size
    xyGaiaInt = numpy.array(numpy.round(xyGaia), dtype=int)
    xyDetectInt = numpy.array(numpy.round(xyDetect), dtype=int)

    # gaiaFull[xyGaiaInt] = 1
    # detectFull[xyDetectInt] = 1

    for x,y in xyGaiaInt:
        gaiaFull[x,y] = 1

    for x,y in xyDetectInt:
        detectFull[x,y] = 1

    # give both a gaussian blur
    gaiaFull = filters.gaussian(gaiaFull, sigma=10)
    detectFull = filters.gaussian(detectFull, sigma=10)


    (xOff, yOff), error, phasediff = phase_cross_correlation(gaiaFull, detectFull, space="real")
    # import pdb; pdb.set_trace()
    # print("detected shift", xOff, yOff)
    # print("took %.2f seconds\n\n"%(time.time()-tstart))

    return xOff, yOff


class ProcGimg(object):
    def __init__(self, filename, gfaID, extract=True, focalScale=1):
        """
        Parameters
        ------------------
        filename : string
            path to proc-gimg file
        gfaID : int
            gfa id (1-6)
        extract : bool
            if True, re-extract centroids.  Else, use extractions
            present from fits file
        focalScale : float
            scale to use for coordio conversions

        """
        self.filename = filename
        self.gfaID = gfaID
        self.extract = extract
        self.focalScale = focalScale

        self.ff = fits.open(filename)
        self.astroNetSolved = self.ff[1].header["SOLVED"]

        if extract:
            self.centroids = self._extract()
        else:
            self.centroids = fitsTableToPandas(self.ff["CENTROIDS"].data)

        gfaRow = gfaCoords[gfaCoords.id == gfaID]
        self.b = gfaRow[["xWok", "yWok", "zWok"]].to_numpy().squeeze()
        self.iHat = gfaRow[["ix", "iy", "iz"]].to_numpy().squeeze()
        self.jHat = gfaRow[["jx", "jy", "jz"]].to_numpy().squeeze()
        self.kHat = gfaRow[["kx", "ky", "kz"]].to_numpy().squeeze()

        if self.astroNetSolved:
            self.wcs = WCS(self.ff[1].header)
            # if there is a wcs solved determine the chip
            # center in degrees O.5 pixel shift is because
            # astropy takes (0,0) to be center of LL pixel
            # and coordio uses (0,0) is LL corner of LL pixel
            sky = self.wcs.pixel_to_world(1024.5,1024.5)
            # edge = w.pixel_to_world(0,0)
            # sky corner to center separation is 0.058 deg
            # (use this for querying radius for gaia)
            self.astroNetCenter = numpy.array([sky.ra.degree, sky.dec.degree])
            self.pixelScale = self.ff[1].header["PIXELSC"]  # arcseconds per pixel
        else:
            self.wcs = None
            self.astroNetCenter = None
            self.pixelScale = None

        # next predict the chip center using coordio
        # propogate (0,0) tangent to the sky
        # calculation includes intentional cherno offsets
        raChipCen, decChipCen, warn = wokxy2radec(
            numpy.array([self.b[0]]), numpy.array([self.b[1]]), "GFA", self.raField, self.decField,
            self.paField, "LCO", self.dateObs.jd, focalScale=self.focalScale
        )

        self.coordioCenter = numpy.array([raChipCen, decChipCen]).squeeze()

        # offset centroids by 0.5 pixels to match coordio's
        # definition of guide coordinates
        # self.centroids["x"] = self.centroids.x + 0.5
        # self.centroids["y"] = self.centroids.y + 0.5
        self.centroids["xCCD"] = self.centroids.x #+ 0.5
        self.centroids["yCCD"] = self.centroids.y #+ 0.5
        # add xyWok coords to centroids
        xTangent, yTangent = guideToTangent(self.centroids.xCCD, self.centroids.yCCD)
        zTangent = numpy.zeros(len(xTangent))
        xWok, yWok, zWok = tangentToWok(
            xTangent, yTangent, zTangent, self.b, self.iHat, self.jHat, self.kHat
        )
        self.centroids["xTangent"] = xTangent
        self.centroids["yTangent"] = yTangent
        self.centroids["zTangent"] = zTangent

        self.centroids["xWok"] = xWok
        self.centroids["yWok"] = yWok
        self.centroids["zWok"] = zWok

        self._getGuideStars() # sets attr self.guideStars
        self._matchGuideStars() # sets attr self.matches

        self.dxMean = None # pixels
        self.dyMean = None # pixels
        self.residMean = None

        self.euclideanTransform = None
        self.dxEuclidean = None
        self.dyEuclidean = None
        self.dRotEuclidean = None
        self.residEuclidean = None

        self.similarityTransform = None
        self.dxSimilarity = None
        self.dySimilarity = None
        self.dRotSimilarity = None
        self.dScaleSimilarity = None
        self.residSimilairty = None

        self._fit()



    @property
    def offRA(self):
        # ra offset in degrees
        return (self.ff[1].header["OFFRA"] + self.ff[1].header["AOFFRA"])/3600.

    @property
    def offDec(self):
        return (self.ff[1].header["OFFDEC"] + self.ff[1].header["AOFFDEC"])/3600.

    @property
    def offPA(self):
        return (self.ff[1].header["OFFPA"] + self.ff[1].header["AOFFPA"])/3600.

    @property
    def raField(self):
        return self.ff[1].header["RAFIELD"] + self.offRA/numpy.cos(numpy.radians(self.decField))

    @property
    def decField(self):
        return self.ff[1].header["DECFIELD"] + self.offDec

    @property
    def paField(self):
        return self.ff[1].header["FIELDPA"] + self.offPA

    @property
    def dateObs(self):
        return Time(self.ff[1].header["DATE-OBS"], format="iso", scale="tai")

    @property
    def nDetect(self):
        return len(self.centroids)

    @property
    def nMatch(self):
        return len(self.matches)

    @property
    def nGuide(self):
        return len(self.guideStars)

    @property
    def configid(self):
        return self.ff[1].header["CONFIGID"]

    @property
    def designid(self):
        return self.ff[1].header["DESIGNID"]

    @property
    def exptime(self):
        return self.ff[1].header["EXPTIME"]

    @property
    def focus(self):
        return self.ff[1].header["M2PISTON"]

    @property
    def grms(self):
        try:
            return self.ff[1].header["RMS"]
        except:
            return None


    def _extract(self, minNPix=50):
        """
        Parameters
        -----------
        minNPix : int
            minimum number of pixels for bone fide detection
        """
        data = numpy.array(self.ff[1].data, dtype=numpy.float64)
        bkg = sep.Background(data)
        bkg_image = bkg.back()
        bkg_rms = bkg.rms()
        data_sub = data - bkg
        objects = sep.extract(data_sub, 1.5, err=bkg.globalrms)
        objects = fitsTableToPandas(objects)
        objects = objects[objects.npix>minNPix]
        return objects.reset_index(drop=True)

    def _getGuideStars(self, maxMag=18, queryRadius=0.08):
        """
        Parameters
        --------------
        maxMag : float
            maximum g mag for a gaia source
        queryRadius : float
            degrees, radius around the chip center to query for

        Get gaia sources that should land on or near this chip.
        Filter on gaia g mag.  propogate ra, decs to chip coordinates,
        finally trim so that only sources on the chip exist
        """

        results = catalogdb.Gaia_DR2.select(
            catalogdb.Gaia_DR2.solution_id,
            catalogdb.Gaia_DR2.source_id,
            catalogdb.Gaia_DR2.ra,
            catalogdb.Gaia_DR2.dec,
            catalogdb.Gaia_DR2.phot_g_mean_mag,
            catalogdb.Gaia_DR2.parallax,
            catalogdb.Gaia_DR2.pmra,
            catalogdb.Gaia_DR2.pmdec
        ).where(
            (peewee.fn.q3c_radial_query(
                catalogdb.Gaia_DR2.ra,
                catalogdb.Gaia_DR2.dec,
                self.coordioCenter[0],
                self.coordioCenter[1],
                queryRadius)
            ) & \
            (catalogdb.Gaia_DR2.phot_g_mean_mag < maxMag)
        )

        results = pandas.DataFrame(list(results.dicts()))
        # add a pseudoflux column
        flux = numpy.exp(-results.phot_g_mean_mag/2.5)*50000
        results["flux"] = flux

        # determine where these stars should land in wok and guide coords
        xWok, yWok, fieldWarn, HA, PA = radec2wokxy(
            results.ra.to_numpy(), results.dec.to_numpy(), GAIA_EPOCH, "GFA",
            self.raField, self.decField, self.paField,
            "LCO", self.dateObs.jd, focalScale=self.focalScale,
            pmra=results.pmra.to_numpy(), pmdec=results.pmdec.to_numpy()
        )
        zWok = numpy.array([POSITIONER_HEIGHT]*len(xWok))

        results["xWok"] = xWok
        results["yWok"] = yWok
        results["zWok"] = zWok
        results["fieldWarn"] = fieldWarn

        # convert from xyWok to gfa pixels
        xT, yT, zT = wokToTangent(
            xWok, yWok, zWok, self.b, self.iHat, self.jHat, self.kHat
        )
        # convert from tangent to guide
        xCCD, yCCD = tangentToGuide(xT,yT)

        results["xTangent"] = xT
        results["yTangent"] = yT
        results["zTangent"] = zT

        results["xCCD"] = xCCD
        results["yCCD"] = yCCD

        # throw out stars landing outside the chip
        # for xcorrelation routine can't have any detections outside the chip
        keep = (results.xCCD < 2047) & (results.xCCD > 1) & (results.yCCD < 2047) & (results.yCCD > 1)
        results = results[keep]

        # throw out any rows with NaNs
        results = results.dropna()

        self.guideStars = results.reset_index(drop=True)


    def _matchGuideStars(self, thresh=10):
        """
        Paramters
        -----------------
        thresh : float
            threshold in pixels of a positive match after a bulk xyoffset
            has been determined and applied
        """
        xyDetect = self.centroids[["xCCD", "yCCD"]].to_numpy()
        xyGaia = self.guideStars[["xCCD", "yCCD"]].to_numpy()
        dx, dy = getShift2(xyGaia, xyDetect)
        print("gfa %i shift %.2f %.2f"%(self.gfaID, dx, dy))
        xyDetectShift = xyDetect + numpy.array([[dx,dy]]*len(xyDetect))
        idxDetect, idxGaia, dist = arg_nearest_neighbor(xyDetectShift, xyGaia)#, atol=thresh)
        keep = dist < thresh
        idxDetect = idxDetect[keep]
        idxGaia = idxGaia[keep]
        self.dist = dist[keep]

        centroidsMatched = self.centroids.iloc[idxDetect].reset_index(drop=True)
        guideStarsMatched = self.guideStars.iloc[idxGaia].reset_index(drop=True)

        # merge matched lists
        matchedDetections = guideStarsMatched.merge(
            centroidsMatched, left_index=True, right_index=True,
            suffixes=("_expect", "_meas")
        )


        matchedDetections["configid"] = self.configid
        matchedDetections["designid"] = self.designid

        self.matches = matchedDetections

    def _fit(self):
        if self.nMatch == 0:
            # need at least 1 detection
            return

        dx = self.matches.xCCD_expect.to_numpy() - self.matches.xCCD_meas.to_numpy()
        dy = self.matches.yCCD_expect.to_numpy() - self.matches.yCCD_meas.to_numpy()
        self.dxMean = numpy.mean(dx)
        self.dyMean = numpy.mean(dy)

        self.residMean = numpy.sqrt((dx-self.dxMean)**2+(dy-self.dyMean)**2)

        if self.nMatch < 2:
            # need at least 2 detections
            return

        xyExpect = self.matches[["xCCD_expect", "yCCD_expect"]].to_numpy()
        xyMeas = self.matches[["xCCD_meas", "yCCD_meas"]].to_numpy()

        self.euclideanTransform = EuclideanTransform()
        # go from meas to expect
        self.euclideanTransform.estimate(xyMeas, xyExpect)
        self.dxEuclidean, self.dyEuclidean = self.euclideanTransform.translation
        self.dRotEuclidean = numpy.degrees(self.euclideanTransform.rotation)
        xyFit = self.euclideanTransform(xyMeas)
        self.residEuclidean = numpy.sum((xyExpect - xyMeas)**2, axis=1)

        if self.nMatch < 3:
            return

        self.similarityTransform = SimilarityTransform()
        self.dxSimilarity, self.dySimilarity = self.similarityTransform.translation
        self.dRotSimilarity = numpy.degrees(self.similarityTransform.rotation)
        self.dScaleSimilarity = self.similarityTransform.scale
        xyFit = self.similarityTransform(xyMeas)
        self.residSimilarity = numpy.sum((xyExpect - xyMeas)**2, axis=1)



class GuideBundle(object):
    def __init__(self, mjd, imgNum):
        self.mjd = mjd
        self.imgNum = imgNum

        imgNumStr = str(imgNum).zfill(4)
        self.gfaDict = {}
        for gfaNum in range(1,7):
            imgFile = GIMG_BASE + "/%i/proc-gimg-gfa%is-%s.fits"%(mjd,gfaNum,imgNumStr)
            self.gfaDict[gfaNum] = ProcGimg(imgFile, gfaNum)

        self.fit()

    def fit(self):
        dfList = []
        for gfaID, gfaDict in self.gfaDict.items():
            _df = gfaDict.matches.copy()
            _df["gfaID"] = gfaID
            dfList.append(_df)

        df = pandas.concat(dfList)
        self.matches = df

        self.xyExpect = df[["xWok_expect", "yWok_expect"]].to_numpy()
        self.xyMeas = df[["xWok_meas", "yWok_meas"]].to_numpy()

        self.dxy = self.xyExpect - self.xyMeas
        self.rms = numpy.sqrt(numpy.mean(self.dxy**2))

        self.similarityTransform = SimilarityTransform()
        self.similarityTransform.estimate(self.xyMeas, self.xyExpect)
        self.xyFit = self.similarityTransform(self.xyMeas)
        self.dxyFit = self.xyExpect - self.xyFit
        self.fitrms = numpy.sqrt(numpy.mean(self.dxyFit**2))

        self.transx, self.transy = self.similarityTransform.translation
        self.rot = numpy.degrees(self.similarityTransform.rotation)
        self.scale = self.similarityTransform.scale

        self.matches["dxFit"] = self.dxyFit[:,0]
        self.matches["dyFit"] = self.dxyFit[:,1]

        self.matches["dx"] = self.dxyFit[:,0]
        self.matches["dy"] = self.dxyFit[:,1]

        self.matches["rms"] = self.rms
        self.matches["fitrms"] = self.fitrms

    def plots(self):

        plt.figure(figsize=(10,10))
        plt.quiver(self.xyExpect[:,0], self.xyExpect[:,1],
            self.dxy[:,0], self.dxy[:,1], angles="xy", units="xy",
            width=1, scale=0.1
        )
        plt.xlabel("x wok")
        plt.ylabel("y wok")
        plt.title("dxy: rms = %.2f scale = %.6f"%(self.rms, self.scale))
        plt.savefig("dxy_%i_%i.pdf"%(self.mjd, self.imgNum))

        plt.figure(figsize=(10,10))
        plt.quiver(self.xyExpect[:,0], self.xyExpect[:,1],
            self.dxyFit[:,0], self.dxyFit[:,1], angles="xy", units="xy",
            width=1, scale=0.01
        )
        plt.xlabel("x wok")
        plt.ylabel("y wok")
        plt.title("dxy fit: rms = %.2f scale = %.6f"%(self.fitrms, self.scale))
        plt.savefig("dxy_fit_%i_%i.pdf"%(self.mjd, self.imgNum))

        plt.close("all")


def doOne(mjdImgNum):
    mjd, imgNum = mjdImgNum
    print("processing", mjd, imgNum)
    gb = GuideBundle(mjd, imgNum)
    df = gb.matches
    df["mjd"] = mjd
    df["imgNum"] = imgNum
    return df

def getImgNum(filename):
    return int(filename.split("-")[-1].split(".fits")[0])

def scanMJDs():
    mjdImgList = []
    # nextMJD = 59818
    for nextMJD in MJD_LIST:
        mjdPath = GIMG_BASE + "/%i"%nextMJD
        if not os.path.exists(mjdPath):
            break
        # determine the first and last proc image number for the night
        imgFiles = sorted(glob.glob(mjdPath + "/proc-gimg*.fits"))
        firstImgNum = getImgNum(imgFiles[0])
        # firstImgNum = 122
        lastImgNum = getImgNum(imgFiles[-1])
        for imgNum in range(firstImgNum, lastImgNum+1):
            imgNumStr = str(imgNum).zfill(4)
            skipImg = False
            for gfaID in range(1,7):
                imgFile = GIMG_BASE + "/%i/proc-gimg-gfa%is-%s.fits"%(nextMJD,gfaID,imgNumStr)
                if not os.path.exists(imgFile):
                    skipImg = True
                    break
                ff = fits.open(imgFile)
                if not ff[1].header["SOLVED"]:
                    skipImg = True
                    break
                if ff[1].header["OFFRA"] != 0:
                    skipImg = True
                    break
                if ff[1].header["AOFFRA"] != 0:
                    skipImg = True
                    break
                if ff[1].header["OFFDEC"] != 0:
                    skipImg = True
                    break
                if ff[1].header["AOFFDEC"] != 0:
                    skipImg = True
                    break

            if skipImg:
                print("skipping mjd, img", nextMJD, imgNum)
                continue

            mjdImgList.append([nextMJD, imgNum])

        # nextMJD += 1

    print("going to process nimages", len(mjdImgList))

    print("\n\n--------")
    print(mjdImgList)
    print("\n\n")


def process():

    arr = numpy.array(MJD_IMGLIST, dtype=int)
    numpy.random.shuffle(arr)
    mjdImgList = arr[:1000]
    # p = Pool(25)
    # dfList = p.map(doOne, mjdImgList)

    dfList = []
    for mjdImg in mjdImgList:
        dfList.append(doOne(mjdImg))

    df = pandas.concat(dfList)
    df.to_csv("allSolved.csv")



if __name__ == "__main__":
    # solve6(59843, 22, extract=True)
    # gb = GuideBundle(59843, 22)
    # gb.plots()
    # scanMJDs()
    # process()
    gb = GuideBundle(59854, 100)
    gb.plots()
